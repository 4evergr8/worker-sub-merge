export let html = `
<!DOCTYPE html>
<html lang="zh">
<head>
    <link rel="apple-touch-icon" sizes="180x180" href="https://4evergr8.github.io/resources/icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="https://4evergr8.github.io/resources/icon.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://4evergr8.github.io/resources/icon.png">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clash配置融合</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <style>



        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans&family=Noto+Sans+SC:wght@400&display=swap');
        #OwnIcon {
            font-family: "Playwrite AU SA", "ZCOOL KuaiLe", serif;
            position: fixed; /* 固定位置 */
            bottom: 10px; /* 距离底部10px */
            left: 10px; /* 距离右侧10px */
            width: 30px; /* 设置宽度为30px */
            height: 30px; /* 设置高度为30px */
            margin: 0; /* 移除外边距 */
            padding: 0; /* 移除内边距 */
            background-color: rgba(0, 123, 255, 0); /* 按钮背景色 */
            border: none; /* 去掉边框 */
            border-radius: 50%; /* 设置为圆形 */
            font-size: 16px; /* 字体大小 */
            cursor: pointer; /* 鼠标指针样式 */
            display: flex; /* 使用Flexbox居中内容 */
            align-items: center; /* 垂直居中 */
            justify-content: center; /* 水平居中 */
            transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s; /* 添加过渡效果 */
        }

        #OwnIcon:hover {
            background-color: rgb(255, 255, 255); /* 悬停时背景色 */
            box-shadow: 0 4px 15px rgb(255, 255, 255); /* 悬停时阴影 */
            transform: scale(1.1); /* 悬停时放大 */
        }
        #GitHubIcon {
            font-family: "Playwrite AU SA", "ZCOOL KuaiLe", serif;
            position: fixed; /* 固定位置 */
            bottom: 10px; /* 距离底部10px */
            right: 10px; /* 距离右侧10px */
            width: 30px; /* 设置宽度为30px */
            height: 30px; /* 设置高度为30px */
            margin: 0; /* 移除外边距 */
            padding: 0; /* 移除内边距 */
            background-color: #007bff; /* 按钮背景色 */
            color: white; /* 按钮字体颜色 */
            border: none; /* 去掉边框 */
            border-radius: 50%; /* 设置为圆形 */
            font-size: 16px; /* 字体大小 */
            cursor: pointer; /* 鼠标指针样式 */
            display: flex; /* 使用Flexbox居中内容 */
            align-items: center; /* 垂直居中 */
            justify-content: center; /* 水平居中 */
            transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s; /* 添加过渡效果 */
        }

        #GitHubIcon:hover {
            background-color: #0056b3; /* 悬停时背景色 */
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.5); /* 悬停时阴影 */
            transform: scale(1.1); /* 悬停时放大 */
        }


        img{
            max-width: 256px;
        }
        .bvambient_particle
        {
            position: absolute;
            pointer-events: none;
            transition: top linear, left linear;

        }

        #ambient {
            overflow: hidden;
            position: absolute;
            width: 100%;
            height: 100vh;
            z-index: -1; /* 将元素置于最底层 */
        }
        #qrcode {


            display: block; /* 确保是块级元素 */
            margin: 20px auto; /* 居中显示 */
            overflow: hidden; /* 防止内容溢出 */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box; /* 使宽度和高度计算包括内边距 */
        }

        body {
            font-family: "Noto Sans", "Noto Sans SC", serif;
            background-color: black;
            display: flex;
            flex-direction: column;
            align-items: center; /* 水平居中 */
            justify-content: center; /* 垂直居中 */
            height: 100vh; /* 视口高度 */
            margin: 0; /* 去掉默认的边距 */

        }


        h1 {
            font-size: 30px;
            text-align: center; /* 标题居中 */
            color: black; /* 字体颜色 */
            margin: 10px; /* 边距 */
        }

        h2 {
            text-align: center; /* 标题居中 */
            color: black; /* 字体颜色 */
            margin: 10px; /* 边距 */
        }

        h3 {
            text-align: center; /* 标题居中 */
            color: black; /* 字体颜色 */
            margin: 10px; /* 边距 */
        }


        .input-group {
            display: flex; /* 使用弹性布局 */
            justify-content: center; /* 居中对齐 */
            margin-bottom: 20px; /* 下边距 */
        }

        label {
            font-size: 18px; /* 标签字体大小 */
            margin: 10px; /* 边距 */
            align-self: center; /* 垂直居中 */
        }


        input[type="text"] {
            margin: 10px; /* 每个按钮周围有10px的间距 */
            padding: 10px; /* 内边距 */
            border: 2px solid #007bff; /* 边框颜色 */
            border-radius: 10px; /* 圆角 */
            font-size: 16px; /* 字体大小 */
            width: 200px; /* 输入框宽度 */
            transition: border-color 0.3s, box-shadow 0.3s, transform 0.3s; /* 添加过渡效果 */
        }

        input[type="text"]:focus {
            border-color: #0056b3; /* 聚焦时边框颜色 */
            outline: none; /* 去掉默认的轮廓 */
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* 聚焦时阴影 */
        }

        input[type="text"]:hover {
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.5); /* 悬停时阴影 */
            transform: scale(1.1); /* 悬停时上移 */
        }

        button {
            font-family: "ZCOOL KuaiLe", serif;
            margin: 10px; /* 每个按钮周围有10px的间距 */
            padding: 10px 15px; /* 内边距 */
            background-color: #007bff; /* 按钮背景色 */
            color: white; /* 按钮字体颜色 */
            border: none; /* 去掉边框 */
            border-radius: 10px; /* 圆角 */
            font-size: 16px; /* 字体大小 */
            cursor: pointer; /* 鼠标指针样式 */
            transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s; /* 添加过渡效果 */
        }

        button:hover {
            background-color: #0056b3; /* 悬停时背景色 */
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.5); /* 悬停时阴影 */
            transform: scale(1.1); /* 悬停时放大 */
        }


        .card-back {

            padding: 20px; /* 内边距 */
            display: flex;
            flex-direction: column;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* 阴影效果 */
            text-align: center; /* 文本居中 */
            background: linear-gradient(to right, rgba(50, 50, 50, 1), rgba(211, 211, 211, 1)); /* 更淡的黑到浅灰的渐变 */


            border-radius: 15px;
            border: 2px solid #007bff; /* 边框颜色 */
        }


    </style>

</head>
<body>
<div id="ambient"></div>

<script>
    /*-------------------------

BVAmbient - VanillaJS Particle Background
https://bmsvieira.github.io/BVAmbient/

Made by: Bruno Vieira

--------------------------- */

    var isPaused = false;

    class BVAmbient {

        constructor({
                        selector = 'defaultId',
                        particle_number = "50",
                        particle_maxwidth = "30",
                        particle_minwidth = "5",
                        particle_radius = "50",
                        particle_opacity = true,
                        particle_colision_change = true,
                        particle_background = "#ededed",
                        particle_image = {
                            image: false,
                            src: ""
                        },
                        responsive = [
                            {
                                breakpoint: "default"
                            }
                        ],
                        fps = "60",
                        max_transition_speed = 12000,
                        min_transition_speed = 8000,
                        refresh_onfocus = true
                    })
        {
            // Define Variables
            this.selector = selector.substring(1);
            this.particle_number = particle_number;
            this.fps = fps;
            this.max_transition_speed = max_transition_speed,
                this.min_transition_speed = min_transition_speed,
                this.particle_maxwidth = particle_maxwidth;
            this.particle_minwidth = particle_minwidth;
            this.particle_radius = particle_radius;
            this.particle_colision_change = particle_colision_change;
            this.particle_background = particle_background;
            this.particle_image = particle_image;
            this.responsive = responsive;
            this.particle_opacity = particle_opacity;
            this.refresh_onfocus = refresh_onfocus;

            // Global Variables
            var randomID = Math.floor(Math.random() * (9999 - 0 + 1)) + 0;
            var selector = this.selector;
            var fps = this.fps;
            var isPlaying = true;
            var particle_maxwidth = this.particle_maxwidth;
            var particle_minwidth = this.particle_minwidth;
            var particle_radius = this.particle_radius;
            var particle_colision_change = this.particle_colision_change;
            var particle_background = this.particle_background;
            var particle_image = this.particle_image;
            var responsive = this.responsive;
            var particle_opacity = this.particle_opacity;
            var trail_count = 0;
            var max_transition_speed = this.max_transition_speed;
            var min_transition_speed = this.min_transition_speed;
            var refresh_onfocus = this.refresh_onfocus;

            var particle_x_ray = [];

            // Add movement to particle
            this.MoveParticle = function(element) {

                var isresting = 1;

                // Moving Directions
                var top_down = ['top', "down"];
                var left_right = ["left", "right"];

                // Random value to decide wich direction follow
                var direction_h = Math.floor(Math.random() * (1 - 0 + 1)) + 0;
                var direction_v = Math.floor(Math.random() * (1 - 0 + 1)) + 0;

                // Direction
                var d_h = left_right[direction_h];
                var d_v = top_down[direction_v];

                var pos = 0, ver = 0, element_width = element.offsetWidth;
                var rect_main = document.getElementById(selector);

                // Change particle size
                function ChangeParticle(particle)
                {

                    // Check if random color is enabled, change particle color when colides
                    if(particle_background == "random") { particle.style.backgroundColor = getRandomColor(); }

                    // Get random number based on the width and height of main div
                    var RandomWidth = Math.random() * (particle_maxwidth - particle_minwidth) + particle_minwidth;
                    particle.style.width = RandomWidth+"px";
                    particle.style.height = RandomWidth+"px";

                }

                // Set frame to move particle
                function SetFrame() {

                    if (isPlaying) setTimeout(SetFrame, 1000 / fps);

                    // Element offset positioning
                    pos = element.offsetTop;
                    ver = element.offsetLeft;

                    // Check colision bounds
                    if(pos == rect_main.offsetHeight-element_width) {
                        d_v = "top";
                        pos = rect_main.offsetHeight-element_width;
                        isresting = 1;
                        if(particle_colision_change == true) { ChangeParticle(element); } // Change Particle Size on colision
                    }
                    if(pos <= 0){
                        d_v = "down";
                        pos = 0;
                        isresting = 1;
                        if(particle_colision_change == true) { ChangeParticle(element); } // Change Particle Size on colision
                    }
                    if(ver == rect_main.offsetWidth-element_width){
                        d_h = "left";
                        ver = rect_main.offsetWidth-element_width;
                        isresting = 1;
                        if(particle_colision_change == true) { ChangeParticle(element); } // Change Particle Size on colision
                    }
                    if(ver <= 0){
                        d_h = "right";
                        ver = 0;
                        isresting = 1;
                        if(particle_colision_change == true) { ChangeParticle(element); } // Change Particle Size on colision
                    }

                    // It won add another position until the end of transition
                    if(isresting == 1)
                    {

                        var RandomTransitionTime = Math.floor(Math.random() * (max_transition_speed - min_transition_speed + 1)) + min_transition_speed;
                        element.style.transitionDuration = RandomTransitionTime+"ms";

                        // Check Position
                        if(d_v == "down" && d_h == 'left')
                        {
                            element.style.left = Number(element.offsetLeft) - Number(300) + "px";
                            element.style.top = rect_main.offsetHeight-Number(element_width) + "px";
                            isresting = 0;
                        }
                        if(d_v == "down" && d_h == 'right')
                        {
                            element.style.left = Number(element.offsetLeft) + Number(300) + "px";
                            element.style.top = rect_main.offsetHeight-Number(element_width) + "px";
                            isresting = 0;

                        }
                        if(d_v == "top" && d_h == 'left')
                        {
                            element.style.left = Number(element.offsetLeft)-Number(element_width) - Number(300) + "px";
                            element.style.top = "0px";
                            isresting = 0;

                        }
                        if(d_v == "top" && d_h == 'right')
                        {
                            element.style.left = Number(element.offsetLeft)-Number(element_width) + Number(300) + "px";
                            element.style.top = "0px";
                            isresting = 0;
                        }
                    }

                    // Saves particle position to array
                    if(element.offsetLeft != 0 && element.offsetTop != 0) { particle_x_ray[element.id] = ({'id': element.id, 'x': element.offsetLeft, 'y': element.offsetTop}); }

                }

                // Call function for the first time
                SetFrame();
            };

            // Set up particles to selector div
            this.SetupParticles = function(number) {

                var resp_particles;
                particle_x_ray = [];

                // Get window viewport inner width
                var windowViewportWidth = window.innerWidth;

                // If functions brings no number, it follow the default
                if(number == undefined)
                {

                    // Loop responsive object to get current viewport
                    for (var loop = 0; loop < responsive.length; loop++) {
                        if(responsive[loop].breakpoint >= windowViewportWidth) { resp_particles = responsive[loop]["settings"].particle_number; }
                    }

                    // If there is no result from above, default particles are applied
                    if(resp_particles == undefined) { resp_particles = this.particle_number; }

                } else {
                    resp_particles = number;
                }

                // Add number of particles to selector div
                for (var i = 1; i <= resp_particles; i++) {

                    // Generate random number to particles
                    var random_id_particle = Math.floor(Math.random() * (9999 - 0 + 1)) + 0;

                    // Check if image source is empty and append particle to main div
                    if(this.particle_image['image'] == false)
                    {
                        document.getElementById(this.selector).insertAdjacentHTML('beforeend', "<div id='bvparticle_"+random_id_particle+"' class='bvambient_particle' style='display: block;'></div>");
                    } else {
                        document.getElementById(this.selector).insertAdjacentHTML('beforeend', "<img src='"+this.particle_image['src']+"' id='bvparticle_"+random_id_particle+"' class='bvambient_particle' style='display: block;'>");
                    }

                    var bvparticle = document.getElementById("bvparticle_"+random_id_particle);

                    // Add
                    particle_x_ray.push("bvparticle_"+random_id_particle);

                    // Get Width and Height of main div
                    var widthMainDiv = document.getElementById(selector);

                    // Get random number based on the width and height of main div
                    var RandomTopPosition = Math.floor(Math.random() * (widthMainDiv.offsetHeight - 40 + 1)) + 0;
                    var RandomLeftPosition = Math.floor(Math.random() * (widthMainDiv.offsetWidth - 100 + 1)) + 0;

                    // Get random number based on the width and height of main div
                    var RandomWidth = Math.random() * (this.particle_maxwidth - this.particle_minwidth) + this.particle_minwidth;

                    // Get Random Opacity between 0.2 and 1 if active
                    if(particle_opacity == true) { var RandomOpacity = Math.random() * (1 - 0.2) + 0.2; } else { var RandomOpacity = 1; }

                    // Add random positioning to particle
                    bvparticle.style.top = RandomTopPosition+"px";
                    bvparticle.style.left = RandomLeftPosition+"px";
                    bvparticle.style.width = RandomWidth+"px";
                    bvparticle.style.height = RandomWidth+"px";
                    bvparticle.style.opacity = RandomOpacity;
                    bvparticle.style.borderRadius = particle_radius+"px";

                    // Check if it has random color enabled
                    if(particle_background == "random") { bvparticle.style.backgroundColor = getRandomColor(); } else { bvparticle.style.backgroundColor = particle_background; }

                    // Move particle
                    this.MoveParticle(bvparticle);
                }
            }

            // ** SETUP SLIDE **
            this.SetupParticles();

            if(refresh_onfocus == true){
                // When user enters tab again refresh position
                document.addEventListener('focus', (e) => {
                    document.getElementById(selector).innerHTML = "";
                    this.SetupParticles();
                });}

            // Refresh results
            this.particle_x_ray = particle_x_ray;

            // Generates a random hex color
            function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }
        }

        // ** METHODS **
        // REFRESH PARTICLES
        Refresh() {

            // Remove all particles
            document.getElementById(this.selector).innerHTML = "";
            // Setup new Ambient
            this.SetupParticles();
        }

        // DESTROY
        Destroy() {

            // Remove all particles and unbind all its events
            document.getElementById(this.selector).remove();
        }

        // ADD PARTICLES
        Add(number) {
            if(number != undefined)
            {
                // Add new particles
                this.SetupParticles(number);
            }
        }

        // PAUSE
        Controls(command)
        {
            // Check what type of command is
            switch(command) {
                case "pause": // Pause Particles moviment
                    isPaused = true;
                    break;
                case "play": // Resume Particles moviment
                    isPaused = false;
                    break;
                default:
                    console.log("BVAmbient | Command not recognized.");
            }
        }

        // CHANGE PARTICLES
        Change(properties) {

            // Changes particles according to properties available
            if(properties.type == "particle_background")
            {
                document.querySelectorAll('.bvambient_particle').forEach((item) => {
                    // Change to chosen color
                    item.style.backgroundColor = properties.value;
                });
            } else { console.log("BVAmbient | Propertie not recognized."); }
        }
    }
    document.addEventListener("DOMContentLoaded", function() {
        var demo1 = new BVAmbient({
            selector: "#ambient",
            fps: 60,
            max_transition_speed: 12000,
            min_transition_speed: 8000,
            particle_number: 30,
            particle_maxwidth: 60,
            particle_minwidth: 10,
            particle_radius: 50,
            particle_opacity: true,
            particle_colision_change: true,
            particle_background: "#58c70c",
            refresh_onfocus: true,
            particle_image: {
                image: false,
                src: ""
            },
            responsive: [
                {
                    breakpoint: 768,
                    settings: {
                        particle_number: "15"
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        particle_number: "10"
                    }
                }
            ]
        });
    });
</script>




<div class="card-back">
    <h1>Clash配置融合</h1>

    <!-- 解码部分 -->
    <div id="input-container">
        <!-- 初始输入框 -->
        <div class="input-group">
            <input type="text" class="input-field" placeholder="粘贴订阅链接">
        </div>
    </div>

    <div class="input-group">
        <button onclick="addInput()">➕</button>
        <button onclick="copyLink()">融合配置</button>

    </div>


    <div id="qrcode">
        <img src="https://4evergr8.github.io/resources/icon.png" alt="示例图片" id="random" onclick="getRandomImage()">
    </div>


</div>
<a href="https://github.com/4evergr8/worker-sub-merge" target="_blank">
    <img src="https://4evergr8.github.io/resources/github-mark.png" alt="项目地址" id="GitHubIcon">
</a>
<a href="https://4evergr8.github.io" target="_blank">
    <img src="https://4evergr8.github.io/resources/icon.png" alt="主页地址" id="OwnIcon">
</a>


<script>
    function getRandomImage() {
        var totalImages = 52; // 假设有268张图片（001.jpg到268.jpg）
        var randomIndex = Math.floor(Math.random() * totalImages) + 1; // 随机获取索引
        var imagePath = 'https://4evergr8.github.io/resources/jpgs/' + randomIndex.toString().padStart(3, '0') + '.jpg'; // 使用 padStart 处理序号
        document.getElementById('random').src = imagePath; // 设置图片源
    }











    getRandomImage();













    function generateQRCode(link) {
        // 清空之前的二维码
        document.getElementById("qrcode").innerHTML = "";

        // 生成新的二维码
        new QRCode(document.getElementById("qrcode"), {
            text: link,
            colorDark: "#000000", // 深色部分颜色
            colorLight: "#ffffff", // 浅色部分颜色
            correctLevel: QRCode.CorrectLevel.H // 纠错等级
        });
    }




    // 获取输入框容器
    const inputContainer = document.getElementById('input-container');

    // 添加输入框
    function addInput() {
        if(document.getElementById("qrcode")){document.getElementById("qrcode").remove()}

        const lastInputGroup = inputContainer.lastElementChild;


        const newInputGroup = document.createElement('div');
        newInputGroup.className = 'input-group';


        const newInput = document.createElement('input');
        newInput.type = 'text';
        newInput.className = 'input-field';
        newInput.placeholder = '粘贴订阅链接';

        const commaButton = document.createElement('button');
        commaButton.disabled = true; // 禁用按钮
        commaButton.textContent = '，'; // 逗号表情符号
        commaButton.className = 'comma-button';


        if (lastInputGroup) {
            lastInputGroup.appendChild(commaButton);
        }


        newInputGroup.appendChild(newInput);


        inputContainer.appendChild(newInputGroup);
    }

    // 复制链接到剪贴板
    function copyLink() {
        const inputs = document.querySelectorAll('.input-field');
        const links = Array.from(inputs).map(input => input.value.trim()).filter(value => value !== '');
        const combinedLinks = links.join(',');

        const link = `${window.location.origin}/?links=${encodeURIComponent(combinedLinks)}`;

        // 复制链接到剪贴板
        navigator.clipboard.writeText(link);
        window.location.href = `clash://install-config?url=${link}`
        console.log(link);



        generateQRCode(link);
    }
</script>
</body>
</html>





`